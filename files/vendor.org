#+PROPERTY: header-args:elisp :tangle vendor-tangled.el

Enable lexical binding by default.

#+BEGIN_SRC elisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Sh-mode
** DONE Font-lock interpolated variables inside double-quoted strings :published:
   CLOSED: [2017-06-11 Sun 20:58]
   :PROPERTIES:
   :BLOG_TITLE: Font-locking with custom matchers
   :BLOG_FILENAME: 2017-06-11-Font-locking-with-custom-matchers
   :PUBDATE:  [2017-06-11 Sun 20:58]
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-06-11 Sun 20:58]
   :END:
   :CLOCK:
   CLOCK: [2017-06-11 Sun 20:20]--[2017-06-11 Sun 21:27] =>  1:07
   :END:

#+NAME: sh-mode-changelog
|       Date | Change                                                                        |
|------------+-------------------------------------------------------------------------------|
| 2017-06-21 | The regexp was fixed to match =$FOO_BAR= and skip escaped dollars (see this [[https://github.com/Fuco1/Fuco1.github.io/pull/6][PR]]) |

Previously I have written about [[file:~/org/emacs.org::*The%20absolute%20awesomeness%20of%20anchored%20font-lock%20matchers][font-lock anchored matchers]].  Today I have come across another problem and another solution with Emacs's font-lock mechanism.  This trend is starting to annoy me.

I now work at a DevOps position and so I have been writing a lot of shell scripts lately to glue all the stuff we do together.  One missing feature that kept bugging me was the font-locking of interpolated variables in =sh-mode=... that is, the fact that there wasn't any!

#+BEGIN_SRC bash
FOO="hello"
# ugly brown!
BAR="hello $FOO"
# I would really like to see that $FOO is *not* being interpolated
BAZ='hello $FOO'
# in regular usage things are highlighted, but you should always quote, right?
bash $FOO $BAR ${BAZ}
#+END_SRC

The problem with shell programming is that you quote 90% of the time and so the font-locking is wasted :/  You might say, well, just throw in the regexp, right?  Not quite.  We do not want to highlight variables in single-quoted strings where they are not interpolated.  This means we need to only match variables in certain syntactic context.

In the previous post I mentioned you can use custom matchers which are essentially regular elisp functions so long as you conform to the interface of =re-search-forward=.  So that is exactly what I've done.

The following function is a bit convoluted because you need to check the parse state.  Note that the function should only "process" *one* match as =font-lock= will execute it in a loop until it returns =nil= or moves point after the =limit=.

1. Look for the next string matching a variable syntax, which is either
   - a =$= followed by word syntax, or
   - a =$= followed by text enclosed in ={}.=
2. If no match then return nil.  This will tell the font-lock engine
   there is nothing to do up to =limit=.  This happens if the
   =re-search-forward= returns =nil= right away or eventually runs out of
   matches as we get over =limit=.
3. If match, check if we are inside a double-quoted string.
   - If so, great, announce a match with a =throw= and the point where
     we ended (this is not strictly necessary, you only need to
     return non-nil).
   - If not =GOTO 1=.

#+NAME: sh-mode-my-match-variables-in-quotes
#+BEGIN_SRC elisp :tangle no
(defun my-match-variables-in-quotes (limit)
  "Match variables in double-quotes in `sh-mode'."
  (with-syntax-table sh-mode-syntax-table
    (catch 'done
      (while (re-search-forward
              ;; `rx' is cool, mkay.
              (rx (or line-start (not (any "\\")))
                  (group "$")
                  (group
                   (or (and "{" (+? nonl) "}")
                       (and (+ (any alnum "_")))
                       (and (any "*" "@" "#" "?" "-" "$" "!" "0" "_")))))
              limit t)
        (-when-let (string-syntax (nth 3 (syntax-ppss)))
          (when (= string-syntax 34)
            (throw 'done (point))))))))
#+END_SRC

Add the support to the current buffer (use =nil= as first argument) or =sh-mode= globally (use ='sh-mode=):

#+NAME: sh-mode-font-lock-add-keywords
#+BEGIN_SRC elisp :tangle no
(font-lock-add-keywords
 'sh-mode '((my-match-variables-in-quotes
             (1 'default t)
             (2 font-lock-variable-name-face t))))
#+END_SRC

Quite simple and the outcome is very satisfying.  Makes reading shell scripts a lot better in my opinion.  If any of you cares to submit this upstream go ahead, I have signed the contributor papers but I hereby withdraw all claims on the above code so you don't have to go through hoops :)

#+BEGIN_SRC sh
FOO="hello"
# yay
BAR="hello $FOO and also ${FOO}"
# No interpolation in single-quotes
BAZ='hello $FOO'
#+END_SRC

** Final code

The derived =bash-mode= here has no significance except to make font-locking in [[*Font-lock interpolated variables inside double-quoted strings][this blog post]] look correct.  I am lazy to change it each time I re-publish so I made this automatic.

#+BEGIN_SRC elisp :noweb yes
(use-package sh-mode
  :defer t
  :init
  (progn
    (define-derived-mode bash-mode sh-mode "Bash mode")

    <<sh-mode-my-match-variables-in-quotes>>

    <<sh-mode-font-lock-add-keywords>>
    ))
#+END_SRC

* Shell-mode

** DONE Turn on context-aware modes on shell command output          :published:
   CLOSED: [2017-04-29 Sat 23:10]
   :PROPERTIES:
   :BLOG_FILENAME: 2017-04-29-Turn-on-context-aware-modes-on-shell-command-output
   :END:
   :CLOCK:
   CLOCK: [2017-04-30 Sun 16:35]--[2017-04-30 Sun 16:57] =>  0:22
   CLOCK: [2017-04-29 Sat 22:13]--[2017-04-29 Sat 23:11] =>  0:58
   :END:
   :LOGBOOK:
   - State "DONE"       from              [2017-04-29 Sat 23:10]
   :END:

#+NAME: shell-mode-changelog
|       Date | Change                                                              |
|------------+---------------------------------------------------------------------|
| 2018-02-06 | Custom logic in =my-shell-quess-major-mode= replaced by =set-auto-mode= |

These days I work with PHP quite a lot; and especially with PHP calling REST APIs.  I have written a little snippet to execute current buffer using =async-shell-command=  and usually run small helper functions or little prototype scripts directly from Emacs as I develop them.

The return values (really the process output) is JSON most of the time.  So why not have the output buffer in =json-mode= when appropriate?

First, let's write a little helper function to guess the appropriate major mode for a buffer.  Emacs comes with a rich set of features to automagically determine a major mode for a buffer starting from the file extensions through file local variables to scanning the content (shebangs, headings...).  Our helper does not much more than wrap the =set-auto-mode= function to operate in the correct buffer we pass in.

#+NAME: shell-mode-my-shell-guess-major-mode
#+BEGIN_SRC elisp :tangle no
(defun my-shell-guess-major-mode (buffer)
  "Guess major mode for the content of BUFFER."
  (with-current-buffer buffer
    (set-auto-mode)))
#+END_SRC

A configuration for =json-mode= might look something like this:

#+BEGIN_SRC elisp :tangle no
(add-to-list 'magic-mode-alist `(,(rx buffer-start (? "[") "{\"") . json-mode))
#+END_SRC

If the content of the buffer starts with =[{"= or ={"= we are very probably looking at a json document so go ahead and start =json-mode=.  The first argument of the cons in =magic-mode-alist= can also be a function instead of a regexp so the flexibility here is endless.  You could for example try to parse the buffer as json and only then decide on the mode, but I find the above quick and dirty solution satisfactory.

Next little difficulty here is that the process runs asynchronously so I have to hook into the sentinel to know when things are finished.  I do that with the next advice.  When the process finished we call the magic helper method to switch the output to the correct major mode.

#+NAME: shell-mode-shell-command-sentinel
#+BEGIN_SRC elisp :tangle no
(defadvice shell-command-sentinel (after enable-better-mode activate)
  (when (memq (process-status (ad-get-arg 0)) '(exit signal))
    (my-shell-guess-major-mode (process-buffer (ad-get-arg 0)))))
#+END_SRC

Similarly, we advice the synchronous version =shell-command=.  This function returns the exit status if it runs synchronous command or =comint-output-filter= if it was used to start an asynchronous command.  We can decide on that and either run the guess routine or leave it to the sentinel above.

#+NAME: shell-mode-shell-command
#+BEGIN_SRC elisp :tangle no
(defadvice shell-command (after enable-better-mode activate)
  (unless (eq ad-return-value 'comint-output-filter)
    (-when-let (buffer (get-buffer "*Shell Command Output*"))
      (my-shell-guess-major-mode buffer))))

(defadvice shell-command-on-region (after enable-better-mode activate)
  (unless (eq ad-return-value 'comint-output-filter)
    (-when-let (buffer (get-buffer "*Shell Command Output*"))
      (unless (ad-get-arg 4)
        (my-shell-guess-major-mode buffer)))))
#+END_SRC

** Final code
#+BEGIN_SRC elisp :noweb yes
(use-package shell-mode
  :defer t
  :init
  (progn
    <<shell-mode-my-shell-guess-major-mode>>

    <<shell-mode-shell-command-sentinel>>

    <<shell-mode-shell-command>>

    (defun my-shell-mode-init ()
      (setq tab-width 8))
    (add-hook 'shell-mode-hook 'my-shell-mode-init)))
#+END_SRC
* Term-mode
** TODO Emacs should maintain its own TMUX session for terminals
** TODO Emacs should automatically join its session when starting new terminal
** TODO auto-change directory in ansi-term (same way we do in eshell)
For reference: https://oremacs.com/2015/01/10/dired-ansi-term/
** TODO Better integrate kill/yank with ansi-term, fish and tmux
** TODO Do not ask for the shell to start and just use a default
** Kill the term buffer when process dies

#+NAME: term-mode-my-term-exec-hook
#+BEGIN_SRC elisp :tangle no
(defun my-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     (lambda (process event)
       (when (or (string= event "finished\n")
                 (string-prefix-p "exited abnormally" event))
         (kill-buffer buff))))))

(add-hook 'term-exec-hook 'my-term-exec-hook)
#+END_SRC

** Final code

#+BEGIN_SRC elisp :noweb yes
(use-package term
  :config
  (bind-key "M-o" 'elwm-activate-window term-raw-map)

  (defun my-term-mode-init ()
;;   (compilation-minor-mode 1)
  )

  (add-hook 'term-mode-hook 'my-term-mode-init)

  <<term-mode-my-term-exec-hook>>
  )
#+END_SRC
* DONE fontify-face: Fontification of symbols referencing faces      :published:
CLOSED: [2018-04-10 Tue 21:02]
:PROPERTIES:
:BLOG_FILENAME: 2018-04-10-fontify-face:-Fontification-of-symbols-referencing-faces
:PUBDATE:  [2018-04-10 Tue 21:02]
:END:
:LOGBOOK:
- State "DONE"       from              [2018-04-10 Tue 21:02]
:END:
:CLOCK:
CLOCK: [2018-04-10 Tue 20:38]--[2018-04-10 Tue 21:02] =>  0:24
:END:

Today I was updating [[https://github.com/Fuco1/.emacs.d/tree/master/themes][my theme]] to support some additional packages.
I'm a big fan of face inheritance because it makes things very
consistent across the board.  In particular I'm trying to reuse the
faces in the =font-lock-= group as much as possible.

I have even created a similar hierarchy for the various markup systems
such as markdown, org mode, rst, textile, latex and others.  It's
called, unsurprisingly, =markup= and contains all the common elements
such as headers, code text, emphasis and so on.  I then make all the
other modes inherit from this set of faces and thus achieve a
consistent look and feel across all the markup
modes.[fn:3152f1a6034caae:I might somehow package this in the future
but haven't found a good way to plug this into existing themes.  If
you have ideas let me know!].  Have a loop at the definitions if this
makes no sense to you yet!

Anyway, while I was working on adding new faces I got annoyed because
I couldn't see what I was doing.  I sometimes inherit from multiple
faces to make combined faces, sometimes I just add a parameter or two
and it's difficult to see the results. Usually you need to switch to a
different buffer (with the mode you are theming), find the desired
element and look what's going on.

Why couldn't the face name itself be fontified with the face? A ha!  I
already use [[https://elpa.gnu.org/packages/rainbow-mode.html][rainbow-mode]] which colorizes color references such as
#fafafa with the color they represent.  So I'm thinking along the same
lines: the symbols representing faces should be fontified with that
face.  This will make the feedback look much shorter and the
development much faster and more convenient.

I have quickly turned this idea into a package and called it
[[https://github.com/Fuco1/fontify-face][fontify-face]].  The code is rather unsurprising, just a couple lines.
The most interesting part is the function
=fontify-face-colorize-matched-face= which computes the face from the
matched region and then passes it back to font-lock to do its thing.

This works because font-lock allows arbitrary forms in every place
where you can pass a face reference.  The rule is, this form must
evaluate to

- a face reference,
- or a plist representing face properties,
- or nil if we don't want do do anything with the match.

The form I use is =(funcall 'fontify-face-colorize-matched-face)=
because I dislike just passing random blobs of code around.  This way
I can redefine the function without having to mess around with
removing the old forms from =font-lock-keywords-alist=.  This is similar
in logic to why you shouldn't put lambda forms in hooks.

So that's it folks.  Finally, here are some pictures:

#+CAPTION: magit and friends
https://i.imgur.com/hjJQVyL.png

#+CAPTION: markup faces
https://i.imgur.com/1ksWpt3.png
* DONE Using bookmarks with eshell and docker-tramp
    CLOSED: [2017-10-08 Sun 12:25] SCHEDULED: <2017-10-08 Sun 12:00-12:40>
    :PROPERTIES:
    :BLOG_FILENAME: 2017-10-08-Using-bookmarks-with-eshell-and-docker-tramp
    :PUBDATE:  [2017-10-08 Sun 12:25]
    :END:
    :LOGBOOK:
    - State "DONE"       from "NEXT"       [2017-10-08 Sun 12:25]
    :END:
    :CLOCK:
    CLOCK: [2017-10-08 Sun 11:58]--[2017-10-08 Sun 12:30] =>  0:32
    :END:

Emacs comes with a pretty extensible bookmarking system.  As expected,
you can bookmark files (including positions in the file!) in order to
quickly navigate to commonly used files.  I use this for my config
files, personal/gdt org files, my ledger file and so on.

Thanks to the Emacs philosophy of everything being a buffer you can
also bookmark a plethora of special buffers such as email buffers,
elfeed entries, info pages, help pages, dired buffers and many more.
Pretty much any buffer which can be reconstructed from a set of input
arguments can be bookmarked.

As a bonus it all works through the same interface, by default bound
to =C-x r m=, so you can just hit that to see if the buffer's type is
supported or not.

Adding support for new buffers is also amazingly simple.  All you need
to do is define a function which makes a bookmark /record/.  A bookmark
record is simply an alist with arbitrary data.  You can save any state
there that is necessary for the recreation of the buffer.  The only
required key is =handler= which has a function as a value.  This
function is given the entire bookmark record and is responsible for
recreating the buffer.

You then locally assign (with =setq-local=) this record creating
function to =bookmark-make-record-function= which is internally used by
=bookmark.el= when you ask it to create a record.

Recently I've been using [[https://www.docker.com/][docker]] (especially [[https://docs.docker.com/compose/][docker-compose]]) a lot and
one thing that comes up fairly often during development is that you
might want to execute some commands inside the container (for example
when you are using the [[https://medium.com/@alexeiled/docker-pattern-the-build-container-b0d0e86ad601][build container pattern]]).

What bothered me was the fact that I had to leave Emacs, jump to the
terminal and fire away the commands in there.  Turns out someone
clever figured out a way of using TRAMP[fn:1576a5b050a859aa:The
package [[https://github.com/emacs-pe/docker-tramp.el][docker-tramp.el]] is available on MELPA] to connect into docker
containers.  Combined with this, I can use eshell to jump into docker
container and execute commands in there.  Whoa!

#+BEGIN_EXAMPLE
[12:15:50]:~/$ docker ps
CONTAINER ID        IMAGE                 NAMES
e015daa0ceac        fuco1/zathura:0.3.7   focused_hugle
[12:15:52]:~/$ cd /docker:focused_hugle:/
[12:17:01]:/docker:focused_hugle:$ ls
bin   etc     lib    mnt   root  srv  usr      zathura-cb           zathura-ps
boot  girara  lib64  opt   run   sys  var      zathura-djvu
dev   home    media  proc  sbin  tmp  zathura  zathura-pdf-poppler
#+END_EXAMPLE

To tie all of this together I've written a small package
[[https://github.com/Fuco1/eshell-bookmark][eshell-bookmark]][fn:2555a1662558ab6:Now available on MELPA/Stable]
which adds bookmark support to eshell buffers.  More specifically,
when the bookmark is activated it tries to open an eshell in the
directory where the bookmark was created.  If an eshell session
already exists, it just =cd=s into that directory.  The entire package
is less than 30 lines including docstrings.  This is really the ideal
of extensibility.

Thanks to =docker-compose= containers having predictable names, I can
now bookmark each container's eshell session and quickly jump between
them as necessary, all from within Emacs.  No more =$ docker-compose
exec application ...=!

#+BEGIN_SRC elisp
(use-package eshell-bookmark
  :after eshell
  :config
  (add-hook 'eshell-mode-hook #'eshell-bookmark-setup))
#+END_SRC
