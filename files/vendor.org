#+PROPERTY: header-args:elisp :tangle vendor-tangled.el

Enable lexical binding by default.

#+BEGIN_SRC elisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Sh-mode
** DONE Font-lock interpolated variables inside double-quoted strings
   CLOSED: [2017-06-11 Sun 20:58]
   :PROPERTIES:
   :BLOG_TITLE: Font-locking with custom matchers
   :BLOG_FILENAME: 2017-06-11-Font-locking-with-custom-matchers
   :PUBDATE:  [2017-06-11 Sun 20:58]
   :END:
   :LOGBOOK:
   - State "DONE"       from "TODO"       [2017-06-11 Sun 20:58]
   :END:
   :CLOCK:
   CLOCK: [2017-06-11 Sun 20:20]--[2017-06-11 Sun 21:27] =>  1:07
   :END:

#+NAME: sh-mode-changelog
|       Date | Change                                                                        |
|------------+-------------------------------------------------------------------------------|
| 2017-06-21 | The regexp was fixed to match =$FOO_BAR= and skip escaped dollars (see this [[https://github.com/Fuco1/Fuco1.github.io/pull/6][PR]]) |

Previously I have written about [[file:~/org/emacs.org::*The%20absolute%20awesomeness%20of%20anchored%20font-lock%20matchers][font-lock anchored matchers]].  Today I have come across another problem and another solution with Emacs's font-lock mechanism.  This trend is starting to annoy me.

I now work at a DevOps position and so I have been writing a lot of shell scripts lately to glue all the stuff we do together.  One missing feature that kept bugging me was the font-locking of interpolated variables in =sh-mode=... that is, the fact that there wasn't any!

#+BEGIN_SRC bash
FOO="hello"
# ugly brown!
BAR="hello $FOO"
# I would really like to see that $FOO is *not* being interpolated
BAZ='hello $FOO'
# in regular usage things are highlighted, but you should always quote, right?
bash $FOO $BAR ${BAZ}
#+END_SRC

The problem with shell programming is that you quote 90% of the time and so the font-locking is wasted :/  You might say, well, just throw in the regexp, right?  Not quite.  We do not want to highlight variables in single-quoted strings where they are not interpolated.  This means we need to only match variables in certain syntactic context.

In the previous post I mentioned you can use custom matchers which are essentially regular elisp functions so long as you conform to the interface of =re-search-forward=.  So that is exactly what I've done.

The following function is a bit convoluted because you need to check the parse state.  Note that the function should only "process" *one* match as =font-lock= will execute it in a loop until it returns =nil= or moves point after the =limit=.

1. Look for the next string matching a variable syntax, which is either
   - a =$= followed by word syntax, or
   - a =$= followed by text enclosed in ={}.=
2. If no match then return nil.  This will tell the font-lock engine
   there is nothing to do up to =limit=.  This happens if the
   =re-search-forward= returns =nil= right away or eventually runs out of
   matches as we get over =limit=.
3. If match, check if we are inside a double-quoted string.
   - If so, great, announce a match with a =throw= and the point where
     we ended (this is not strictly necessary, you only need to
     return non-nil).
   - If not =GOTO 1=.

#+NAME: sh-mode-my-match-variables-in-quotes
#+BEGIN_SRC elisp :tangle no
(defun my-match-variables-in-quotes (limit)
  "Match variables in double-quotes in `sh-mode'."
  (with-syntax-table sh-mode-syntax-table
    (catch 'done
      (while (re-search-forward
              ;; `rx' is cool, mkay.
              (rx (or line-start (not (any "\\")))
                  (group "$")
                  (group
                   (or (and "{" (+? nonl) "}")
                       (and (+ (any alnum "_")))
                       (and (any "*" "@" "#" "?" "-" "$" "!" "0" "_")))))
              limit t)
        (-when-let (string-syntax (nth 3 (syntax-ppss)))
          (when (= string-syntax 34)
            (throw 'done (point))))))))
#+END_SRC

Add the support to the current buffer (use =nil= as first argument) or =sh-mode= globally (use ='sh-mode=):

#+NAME: sh-mode-font-lock-add-keywords
#+BEGIN_SRC elisp :tangle no
(font-lock-add-keywords
 'sh-mode '((my-match-variables-in-quotes
             (1 'default t)
             (2 font-lock-variable-name-face t))))
#+END_SRC

Quite simple and the outcome is very satisfying.  Makes reading shell scripts a lot better in my opinion.  If any of you cares to submit this upstream go ahead, I have signed the contributor papers but I hereby withdraw all claims on the above code so you don't have to go through hoops :)

#+BEGIN_SRC sh
FOO="hello"
# yay
BAR="hello $FOO and also ${FOO}"
# No interpolation in single-quotes
BAZ='hello $FOO'
#+END_SRC

** Final code

The derived =bash-mode= here has no significance except to make font-locking in [[*Font-lock interpolated variables inside double-quoted strings][this blog post]] look correct.  I am lazy to change it each time I re-publish so I made this automatic.

#+BEGIN_SRC elisp :noweb yes
(use-package sh-mode
  :defer t
  :init
  (progn
    (define-derived-mode bash-mode sh-mode "Bash mode")

    <<sh-mode-my-match-variables-in-quotes>>

    <<sh-mode-font-lock-add-keywords>>
    ))
#+END_SRC

* Shell-mode

** DONE Turn on context-aware modes on shell command output         :published:
   CLOSED: [2017-04-29 Sat 23:10]
   :PROPERTIES:
   :BLOG_FILENAME: 2017-04-29-Turn-on-context-aware-modes-on-shell-command-output
   :END:
   :CLOCK:
   CLOCK: [2017-04-30 Sun 16:35]--[2017-04-30 Sun 16:57] =>  0:22
   CLOCK: [2017-04-29 Sat 22:13]--[2017-04-29 Sat 23:11] =>  0:58
   :END:
   :LOGBOOK:
   - State "DONE"       from              [2017-04-29 Sat 23:10]
   :END:

#+NAME: shell-mode-changelog
|       Date | Change                                                              |
|------------+---------------------------------------------------------------------|
| 2018-02-06 | Custom logic in =my-shell-quess-major-mode= replaced by =set-auto-mode= |

These days I work with PHP quite a lot; and especially with PHP calling REST APIs.  I have written a little snippet to execute current buffer using =async-shell-command=  and usually run small helper functions or little prototype scripts directly from Emacs as I develop them.

The return values (really the process output) is JSON most of the time.  So why not have the output buffer in =json-mode= when appropriate?

First, let's write a little helper function to guess the appropriate major mode for a buffer.  Emacs comes with a rich set of features to automagically determine a major mode for a buffer starting from the file extensions through file local variables to scanning the content (shebangs, headings...).  Our helper does not much more than wrap the =set-auto-mode= function to operate in the correct buffer we pass in.

#+NAME: shell-mode-my-shell-guess-major-mode
#+BEGIN_SRC elisp :tangle no
(defun my-shell-guess-major-mode (buffer)
  "Guess major mode for the content of BUFFER."
  (with-current-buffer buffer
    (set-auto-mode)))
#+END_SRC

A configuration for =json-mode= might look something like this:

#+BEGIN_SRC elisp :tangle no
(add-to-list 'magic-mode-alist `(,(rx buffer-start (? "[") "{\"") . json-mode))
#+END_SRC

If the content of the buffer starts with =[{"= or ={"= we are very probably looking at a json document so go ahead and start =json-mode=.  The first argument of the cons in =magic-mode-alist= can also be a function instead of a regexp so the flexibility here is endless.  You could for example try to parse the buffer as json and only then decide on the mode, but I find the above quick and dirty solution satisfactory.

Next little difficulty here is that the process runs asynchronously so I have to hook into the sentinel to know when things are finished.  I do that with the next advice.  When the process finished we call the magic helper method to switch the output to the correct major mode.

#+NAME: shell-mode-shell-command-sentinel
#+BEGIN_SRC elisp :tangle no
(defadvice shell-command-sentinel (after enable-better-mode activate)
  (when (memq (process-status (ad-get-arg 0)) '(exit signal))
    (my-shell-guess-major-mode (process-buffer (ad-get-arg 0)))))
#+END_SRC

Similarly, we advice the synchronous version =shell-command=.  This function returns the exit status if it runs synchronous command or =comint-output-filter= if it was used to start an asynchronous command.  We can decide on that and either run the guess routine or leave it to the sentinel above.

#+NAME: shell-mode-shell-command
#+BEGIN_SRC elisp :tangle no
(defadvice shell-command (after enable-better-mode activate)
  (unless (eq ad-return-value 'comint-output-filter)
    (-when-let (buffer (get-buffer "*Shell Command Output*"))
      (my-shell-guess-major-mode buffer))))

(defadvice shell-command-on-region (after enable-better-mode activate)
  (unless (eq ad-return-value 'comint-output-filter)
    (-when-let (buffer (get-buffer "*Shell Command Output*"))
      (unless (ad-get-arg 4)
        (my-shell-guess-major-mode buffer)))))
#+END_SRC

** Final code
#+BEGIN_SRC elisp :noweb yes
(use-package shell-mode
  :defer t
  :init
  (progn
    <<shell-mode-my-shell-guess-major-mode>>

    <<shell-mode-shell-command-sentinel>>

    <<shell-mode-shell-command>>

    (defun my-shell-mode-init ()
      (setq tab-width 8))
    (add-hook 'shell-mode-hook 'my-shell-mode-init)))
#+END_SRC
* Term-mode
** TODO Emacs should maintain its own TMUX session for terminals
** TODO Emacs should automatically join its session when starting new terminal
** TODO auto-change directory in ansi-term (same way we do in eshell)
For reference: https://oremacs.com/2015/01/10/dired-ansi-term/
** TODO Better integrate kill/yank with ansi-term, fish and tmux
** TODO Do not ask for the shell to start and just use a default
** Kill the term buffer when process dies

#+NAME: term-mode-my-term-exec-hook
#+BEGIN_SRC elisp :tangle no
(defun my-term-exec-hook ()
  (let* ((buff (current-buffer))
         (proc (get-buffer-process buff)))
    (set-process-sentinel
     proc
     (lambda (process event)
       (when (or (string= event "finished\n")
                 (string-prefix-p "exited abnormally" event))
         (kill-buffer buff))))))

(add-hook 'term-exec-hook 'my-term-exec-hook)
#+END_SRC

** Final code

#+BEGIN_SRC elisp :noweb yes
(use-package term
  :config
  (bind-key "M-o" 'elwm-activate-window term-raw-map)

  (defun my-term-mode-init ()
;;   (compilation-minor-mode 1)
  )

  (add-hook 'term-mode-hook 'my-term-mode-init)

  <<term-mode-my-term-exec-hook>>
  )
#+END_SRC
