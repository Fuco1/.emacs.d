#+PROPERTY: header-args:elisp :tangle org-defs-tangled.el

Enable lexical binding by default.

#+BEGIN_SRC elisp
;; -*- lexical-binding: t -*-
#+END_SRC

* Org mode init

To keep things properly aligned call =org-align-all-tags= every time
before we save an org buffer.

#+BEGIN_SRC elisp
(add-hook
 'org-mode-hook
 (lambda ()
   (add-hook 'before-save-hook 'org-align-all-tags nil 'local)))
#+END_SRC

* Setup magic-mode-alist for org mode
#+BEGIN_SRC elisp
;; If we are looking at something resembling an org-table
(add-to-list 'magic-mode-alist `(,(rx (* white)
                                      "|"
                                      (or (and (* white) (+ alpha))
                                          "-"))
                                 . org-mode))
#+END_SRC

* Replace refile target picking with a sallet
  :CLOCK:
  CLOCK: [2017-06-08 Thu 19:40]--[2017-06-08 Thu 20:06] =>  0:26
  :END:

Go to [[file:~/.emacs.d/.cask/25.2/elpa/org-20170515/org.el::(defun%20org-refile-get-location%20(&optional%20prompt%20default-buffer%20new-nodes)][original refile get location]] and just replace the =cfunc= with our mechanism from below.

#+BEGIN_SRC elisp
(require 'sallet)

(defvar my-org-refile-collection nil
  "Dynamically bound collection to be used as candidates.

This is a hack: sallet can't take an argument on creation.")

(sallet-defsource org-refile ()
  (candidates (lambda () my-org-refile-collection))
  (header "Refile target")
  (renderer
   (lambda (candidate _ user-data)
     (sallet-fontify-regexp-matches
      (plist-get user-data :regexp-matches)
      (car candidate))))
  ;; (matcher sallet-matcher-flx-then-substring)
  (action (lambda (_ c) (car c))))

(defun org-refile-sallet-completing-read (prompt collection &rest args)
  "Read an outline path like a file name."
  (let ((my-org-refile-collection collection))
    (sallet (list 'sallet-source-org-refile))))
#+END_SRC
* DONE Automatically remove inherited tags from tasks after refiling :published:
  CLOSED: [2017-05-09 Tue 19:12]
  :PROPERTIES:
  :BLOG_FILENAME: 2017-05-09-Automatically-remove-inherited-tags-from-tasks-after-refiling
  :PUBDATE:  [2017-05-09 Tue 19:12]
  :END:
  :LOGBOOK:
  - State "DONE"       from "TODO"       [2017-05-09 Tue 19:12]
  :END:
  :CLOCK:
  CLOCK: [2017-05-09 Tue 18:44]--[2017-05-09 Tue 19:35] =>  0:51
  :END:

I have a pretty standard =org-capture= workflow: during the day when an idea comes to mind or I stumble upon a task I can't solve right now or I find an article I would want to read later I use one of the several [[https://github.com/Fuco1/.emacs.d/blob/master/files/org-defs.el#L1142][capture templates I set up]] to quickly file a note and continue with minimal distraction with what I was doing at the time.

*************** TODO change the link to templates to actual headline in the config when published :noexport:

When I add these tasks I try to tag them with appropriate tags.  So

- for articles I add tags according to the area the article relates to (=:math:=, =:programming:=...)
- for tasks in projects I add the project tags (=:emacs:=, =:smartparens:=...)
- for chores I add tags about where to do the given task (=:home:=, =:garden:=...)

Well, the point is, I tag the entries to-be-refiled.

When I get to my daily or weekly review and refiling I had to manually go to the refiled entry and remove the painstakingly added tags.  That is because the tags are already present on the parent headlines most of the time and so get inherited... and I hate to have them duplicitly.  On the other hand, not adding the tags also proved painful because sometimes I leave (non-urgent) tasks sitting in the refile log for a couple days and by the time I get to process them there can be quite a few; the tags help me better remember what is going on.

Of course, the same issue comes up with regular refiling between different hierarchies.

So there is the problem, fortunately nothing a little bit of hacking can't solve.  Org mode conveniently provides =org-after-refile-insert-hook= where we can add the little function below to do the work.

#+BEGIN_SRC elisp
(defun my-org-remove-inherited-local-tags ()
  "Remove local tags that can be inherited instead."
  (let* ((target-tags-local (org-get-tags-at nil 'local))
         ;; We have to remove the local tags otherwise they would not
         ;; show up as being inherited if they are present on
         ;; parents---the local tag would "override" the parent
         (target-tags-inherited
          (unwind-protect
              (progn
                (org-set-tags-to nil)
                (org-get-tags-at))
            (org-set-tags-to target-tags-local))))
    (-each target-tags-local
      (lambda (tag)
        (when (member tag target-tags-inherited)
          (org-toggle-tag tag 'off))))))

(add-hook 'org-after-refile-insert-hook 'my-org-remove-inherited-local-tags)
#+END_SRC

The function also showcases work with the org tag API which I personally find rather confusing (the naming seems to have been invented on the fly because it doesn't make sense half the time).

I also wanted to add the functionality to preserve the inherited tags from the original position so that refiling would be tag-neutral operation.  But that actually proved rather annoying because the point of refiling under a differnet hierarchy is to /not/ have the same tags... otherwise why would you refile at all.

* DONE Fontify done checkbox items in org-mode
  CLOSED: [2017-05-25 Thu 00:10]
  :PROPERTIES:
  :BLOG_FILENAME: 2017-05-25-Fontify-done-checkbox-items-in-org-mode
  :END:
  :CLOCK:
  CLOCK: [2017-05-24 Wed 23:58]--[2017-05-25 Thu 00:25] =>  0:27
  :END:
  :LOGBOOK:
  - State "DONE"       from              [2017-05-25 Thu 00:10]
  :END:

My computer crashed over the weekend and during the re-installation I started migrating my install scripts to puppet (I had roughly 60% covered by puppet prior to that already), so I made a check list in org with all the things to not forget to include.  The list grew quite large and hard to process visually.

There is a somewhat nice feature of org mode which you can turn on using =org-fontify-done-headline= flag; if set to =t=, =DONE= headlines will be highlighted in =org-headline-done= face.  I let this face inherit from =shadow= which effectively removes these lines from my attention.

So to solve my problem naturally I would like to extend this behaviour to checkbox lists.  I don't always do them in sequence and so the gradual change from "normal" to "hidden" lines nicely illustrates the progress and makes the todo items stand out.

Just throw the following somewhere and reload the org buffers (close and reopen or toggle =fundamental-mode= then =org-mode= again).

#+BEGIN_SRC elisp
(font-lock-add-keywords
 'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
 'append)
#+END_SRC

Here's how it looks (list shortened for clarity):

#+BEGIN_SRC org
,*** TODO Puppet
    :CLOCK:
    CLOCK: [2017-05-21 Sun 18:00]--[2017-05-21 Sun 21:55] =>  3:55
    :END:
- [ ] cli :: Add youtube-dl
- [ ] org :: Add plantuml.jar
- [X] emacs :: Add Cask
- [ ] haskell :: Add Cabal sandbox support and build everything in sandboxes
- [ ] php :: Add Composer
- [ ] emacs :: Add EVM
- [ ] ruby :: Add RVM
- [ ] node :: Add NVM
- [ ] node :: Add NPM
- [X] linux :: Add Wine + Winetricks
- [ ] latin :: Add whitakers-words
- [ ] puppet :: Add support to install "docker" apps
- [X] setup :: Ensure download-local directory
- [ ] prog :: Install global (6.5 at least)
- [ ] linux :: Install pasystray (git)
- [ ] prog :: Install ag (0.31.0+)
- [X] cli :: Install tmux (2.0+)
- [ ] linux :: Install twmn
- [X] desktop :: Install slack (from .deb)
- [ ] cli :: Install fisher
- [X] cli ::Install ledger (from package + elisp mode from source?)
- [ ] mail :: Install isync
#+END_SRC

(Also note that the above is /not/ a screenshot, it is an embedded =org-mode= snippet in =org-mode='s =#+BEG_SRC= block.  Inception.)

I stole the regexp from [[https://github.com/hlissner/.emacs.d/blob/master/modules/lang/org/config.el][hlissner's emacs.d]] who apparently came to the same conclusion.  It's a rather nice collection of stuff so check it out, but be warned, it is /super/ idiosyncratic... which in Emacs translation basically means awesome :)

* Org protocol
** DONE Maximize the org-capture buffer
  CLOSED: [2017-09-02 Sat 22:02]
  :PROPERTIES:
  :BLOG_FILENAME: 2017-09-02-Maximize-the-org-capture-buffer
  :PUBDATE:  [2017-09-02 Sat 22:02]
  :END:
  :LOGBOOK:
  - State "DONE"       from              [2017-09-02 Sat 22:02]
  :END:
  :CLOCK:
  CLOCK: [2017-09-02 Sat 21:00]--[2017-09-02 Sat 22:02] =>  1:02
  :END:
I'm a heavy user of =org-capture= and one behaviour of it always annoyed me:  instead of having the capture popup take the whole screen, it opens a new window.  This window is often small and somewhat inconvenient.  I like to do one thing at a time and so when I'm filing a note or capturing an idea I want to see only the capture buffer and no other distractions.  As we all know distractions kill flow and so we should always find ways to get all the nonsense out of the way.

Recently I've started using [[https://github.com/sprig/org-capture-extension][this awesome extension]] to capture web content from firefox (works with chrome too).  I've tweaked the protocol handler to not only invoke =emacsclient "%u"= but also set some frame properties for later.

Here's the bash script I use as the handler

#+BEGIN_SRC sh
#!/bin/bash
emacsclient -c -F '((name . "org-protocol-capture"))' "$@"
#+END_SRC

The =-F= option sets the frame parameters with the specified alist.  Here I only set the name to ="org-protocol-capture"= I make sure to open new frame with =-c=.

Org capture provides several hooks we can use to tweak the default behaviour.

First, we make sure the capture buffer window takes the whole frame.  To do this, we first save the current window configuration and then delete all other windows on entering the =org-capture-mode=.  Unfortunately there is no "before anything happens" hook so we use a before advice instead.


#+NAME: org-protocol-before
#+BEGIN_SRC elisp :tangle no
(defvar my-org-capture-before-config nil
  "Window configuration before `org-capture'.")

(defadvice org-capture (before save-config activate)
  "Save the window configuration before `org-capture'."
  (setq my-org-capture-before-config (current-window-configuration)))

(add-hook 'org-capture-mode-hook 'delete-other-windows)
#+END_SRC

Next, after we finish the capture work flow (either with success or cancellation) we restore the window configuration saved previously.

Finally, let's make sure that after we refile the captured content the frame which was possibly created (if capture was invoked with =org-protocol=) closes itself automatically.  This keeps us in the flow and keeps the distraction of killing the frame manually away.  We use the frame name to decide if we wish to kill the frame or not (this is the =-F= argument from above).


#+NAME: org-protocol-capture-cleanup
#+BEGIN_SRC elisp :tangle no
(defun my-org-capture-cleanup ()
  "Clean up the frame created while capturing via org-protocol."
  ;; In case we run capture from emacs itself and not an external app,
  ;; we want to restore the old window config
  (when my-org-capture-before-config
    (set-window-configuration my-org-capture-before-config))
  (-when-let ((&alist 'name name) (frame-parameters))
    (when (equal name "org-protocol-capture")
      (delete-frame))))

(add-hook 'org-capture-after-finalize-hook 'my-org-capture-cleanup)
#+END_SRC

With these tweaks the whole capture experience is much more streamlined for me.  When I invoke capture from anywhere (Emacs or via =org-protocol=), I get a full screen frame/window where I can quickly jot my thoughts.  After I'm finished everything restores itself to the previous state and I can continue with whatever task I was consumed prior to the capture process.

** Final code

#+BEGIN_SRC elisp :noweb yes
(use-package org-protocol
  :config
  (progn

    <<org-protocol-before>>

    <<org-protocol-capture-cleanup>>

    (use-package async)
    (defun my-org-protocol-save-youtube (info)
      (let* ((parts (org-protocol-split-data info t org-protocol-data-separator))
             (link (car parts)))
        (save-window-excursion
          (async-start-process "ydown" "ydown" nil link)
          (message "Youtube download started: %s" link)
          nil)))

    (push '("save-youtube"
            :protocol "save-youtube"
            :function my-org-protocol-save-youtube
            :kill-client nil)
          org-protocol-protocol-alist)))
#+END_SRC

* Backmatter

#+BEGIN_SRC elisp
(provide 'org-defs-tangled)
#+END_SRC
